# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
subscription_without_maxfailslimit_and_failscounter.test

--SHELL-INIT--
dbInit CB
brokerStart CB 0 IPv4 --cache -subCacheIval 3
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create subscription without maxFailsLimit
# 02. Create entity E1
#     Sleep 3.5 seconds to get a sub-cache-refresh
# 03. GET subscription, see no maxFailsLimit and status==active
# 04. Stop accumulator
# 05. Update E1, to provoke notification that now fails
#     Sleep 3.5 seconds to get a sub-cache-refresh
# 06. GET subscription, see no failsCounter and status==failed
# 07. Start accumulator again
# 08. GET subscription, see set no failsCounter and status==active
# 09. Create subscription with maxFailsLimit=foo and see error
#

echo "01. Create subscription without maxFailsLimit"
echo "============================================="
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": "E.*",
        "type": "T"
      }
    ],
    "condition": {
      "attrs": [ "A1" ]
    }
  },
  "notification": {
    "http": {"url": "http://localhost:'$LISTENER_PORT'/notify"},
    "attrs": [ "A1" ]
  },
  "expires": "2050-04-05T14:00:00.00Z"
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo


echo "02. Create entity E1"
echo "===================="
payload='{
  "id": "E1",
  "type": "T1",
  "A1": 1
}'
orionCurl --url '/v2/entities?options=keyValues' --payload "$payload"
echo
echo


# Sleep > 3 seconds to get a cache refresh
sleep 3.5


echo "03. GET subscription, see no maxFailsLimit and status==active"
echo "============================================================="
orionCurl --url /v2/subscriptions
echo
echo


echo "04. Stop accumulator"
echo "===================="
accumulatorStop
echo
echo


echo "05. Update E1, to provoke notification that now fails"
echo "====================================================="
payload='{
  "A1": 6
}'
orionCurl --url /v2/entities/E1/attrs?options=keyValues --payload "$payload"
echo
echo


# Await sub-cache contents to be dumped into database
sleep 3.5


echo "06. GET subscription, see no failsCounter and status==failed"
echo "============================================================"
orionCurl --url /v2/subscriptions
echo
echo


echo "07. Start accumulator"
echo "====================="
accumulatorStart
echo
echo


# Await sub-cache contents to be dumped into database
sleep 3.5


echo "08. GET subscription, see set no failsCounter and status==active"
echo "================================================================"
orionCurl --url /v2/subscriptions
echo
echo


echo "09. Create subscription with maxFailsLimit=foo and see error"
echo "============================================================"
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": "E.*",
        "type": "T"
      }
    ],
    "condition": {
      "attrs": [ "A1" ]
    }
  },
  "notification": {
    "http": {"url": "http://localhost:'$LISTENER_PORT'/notify"},
    "attrs": [ "A1" ]
  },
  "expires": "2050-04-05T14:00:00.00Z",
  "maxFailsLimit": "foo"
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo



--REGEXPECT--
01. Create subscription without maxFailsLimit
=============================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create entity E1
====================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. GET subscription, see no maxFailsLimit and status==active
=============================================================
HTTP/1.1 200 OK
Content-Length: 305
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "expires": "REGEX([0-9a-f\-]{36}",
        "id": "REGEX([0-9a-f]{24})",
        "notification": {
            "attrs": [
                "A1"
            ],
            "attrsFormat": "normalized",
            "http": {
                "url": "http://localhost:REGEX(\d+)/notify"
            },
            "onlyChangedAttrs": false
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": [
                    "A1"
                ]
            },
            "entities": [
                {
                    "idPattern": "E.*",
                    "type": "T"
                }
            ]
        }
    }
]


04. Stop accumulator
====================


05. Update E1, to provoke notification that now fails
=====================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



06. GET subscription, see no failsCounter and status==failed
============================================================
HTTP/1.1 200 OK
Content-Length: 454
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "id": "REGEX([0-9a-f]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "http": {
                "url": "http://localhost:REGEX(\d+)/notify"
            },
            "lastFailure": "REGEX(.*)",
            "lastFailureReason": "Couldn't connect to server",
            "lastNotification": "REGEX(.*)",
            "lastSuccess": "REGEX(.*)",
            "lastSuccessCode": 200,
            "onlyChangedAttrs": false,
            "timesSent": 2
        },
        "status": "failed",
        "subject": {
            "condition": {
                "attrs": []
            },
            "entities": [
                {
                    "id": "E1"
                }
            ]
        }
    }
]


07. Start accumulator again
===========================
accumulator running as PID REGEX(\d+)


08. GET subscription, see set no failsCounter and status==active
================================================================
HTTP/1.1 200 OK
Content-Length: 454
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "id": "REGEX([0-9a-f]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "http": {
                "url": "http://localhost:REGEX(\d+)/notify"
            },
            "lastFailure": "REGEX(.*)",
            "lastFailureReason": "Couldn't connect to server",
            "lastNotification": "REGEX(.*)",
            "lastSuccess": "REGEX(.*)",
            "lastSuccessCode": 200,
            "onlyChangedAttrs": false,
            "timesSent": 3
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": []
            },
            "entities": [
                {
                    "id": "E1"
                }
            ]
        }
    }
]


09. Create subscription with maxFailsLimit=foo and see error
============================================================
HTTP/1.1 400 Bad Request
Content-Length: 66
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "maxFailsLimit is not an int",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
