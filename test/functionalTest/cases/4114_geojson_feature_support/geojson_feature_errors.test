# Copyright 2022 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Error checking in GeoJSON Feature and FeatureCollection support

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create entity with location geo:json using Feature type without geometry field, see error
# 02. Create entity with location geo:json using Feature type with geometry field but invalid, see error
# 03. Create entity with location geo:json using FeatureCollection type without features field, see error
# 04. Create entity with location geo:json using FeatureCollection type without features field but invalid, see error
# 05. Create entity with location geo:json using FeatureCollection with features field but 0 items, see error
# 06. Create entity with locaiton geo:json using FeatureCollection with features field but more than 1 item, see error
# 07. Create entity with location geo:json using FeatureCollection with features field, one item but without geometry field, see error
# 08. Create entity with location geo:json using FeatureCollection with features field, one item but wit geometry field but invalid, see error
# 09. Create entity with location field
# 0x. (All the above updating the entity)
# 0x. (All the above updating the attributue with PUT)
# 0x. (All the above updating the attributue value directly)
#

echo "01. Create entity with location geo:json using Feature type without geometry field, see error"
echo "============================================================================================="
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "Feature",
      "properties": {
        "label": "-3.6127119138731127, 40.53901978067972"
      }
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. Create entity with location geo:json using Feature type with geometry field but invalid, see error"
echo "======================================================================================================"
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "Feature",
      "geometry": "foo",
      "properties": {
        "label": "-3.6127119138731127, 40.53901978067972"
      }
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "03. Create entity with location geo:json using FeatureCollection type without features field, see error"
echo "======================================================================================================="
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "FeatureCollection"
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "04. Create entity with location geo:json using FeatureCollection type with features field but invalid, see error"
echo "================================================================================================================"
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "FeatureCollection",
      "features": {}
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "05. Create entity with location geo:json using FeatureCollection with features field but 0 items, see error"
echo "==========================================================================================================="
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "FeatureCollection",
      "features": []
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "06. Create entity with locaiton geo:json using FeatureCollection with features field but more than 1 item, see error"
echo "===================================================================================================================="
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "properties": {},
          "geometry": {
            "type": "Point",
            "coordinates": [
              -3.6127119138731127,
              40.53901978067972
            ]
          }
        },
        {
          "type": "Feature",
          "properties": {},
          "geometry": {
            "type": "Point",
            "coordinates": [
              -3.6127119138731127,
              40.53901978067972
            ]
          }
        }
      ]
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "07. Create entity with location geo:json using FeatureCollection with features field, one item but without geometry field, see error"
echo "===================================================================================================================================="
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "properties": {}
        }
      ]
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "08. Create entity with location geo:json using FeatureCollection with features field, one item but wit geometry field but invalid, see error"
echo "============================================================================================================================================"
payload='{
  "id": "E",
  "type": "T",
  "location": {
    "value": {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "properties": {},
          "geometry": []
        }
      ]
    },
    "type": "geo:json"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo



--REGEXPECT--
01. Create entity with location geo:json using Feature type without geometry field, see error
=============================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 68
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "geometry in Feature not found",
    "error": "BadRequest"
}


02. Create entity with location geo:json using Feature type with geometry field but invalid, see error
======================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 75
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "geometry in Feature is not an object",
    "error": "BadRequest"
}


03. Create entity with location geo:json using FeatureCollection type without features field, see error
=======================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 84
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "features field not found in FeatureCollection",
    "error": "BadRequest"
}


04. Create entity with location geo:json using FeatureCollection type with features field but invalid, see error
================================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 84
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "features in FeatureCollection is not a vector",
    "error": "BadRequest"
}


05. Create entity with location geo:json using FeatureCollection with features field but 0 items, see error
===========================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 80
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "features in FeatureCollection has 0 items",
    "error": "BadRequest"
}


06. Create entity with locaiton geo:json using FeatureCollection with features field but more than 1 item, see error
====================================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 89
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "features in FeatureCollection has more than 1 item",
    "error": "BadRequest"
}


07. Create entity with location geo:json using FeatureCollection with features field, one item but without geometry field, see error
====================================================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 68
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "geometry in Feature not found",
    "error": "BadRequest"
}


08. Create entity with location geo:json using FeatureCollection with features field, one item but wit geometry field but invalid, see error
============================================================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 75
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "geometry in Feature is not an object",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
