# Copyright 2022 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
covered_notifications_in_subscritpions

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. POST /v2/entities, to create Room1 with temperature and pressure.
# 02. POST /v2/subscriptions, to create subscription with covered=true and some attributes in attrs which is not present in entities.
# 03. GET /v2/subscriptions/subscription_id, to check the covered=true.
# 04. PATCH /v2/entities/Room1/attrs, to update the value of pressure attribute.
# 05. Dump the accumulator, see the missing attribute in the notification added with value "null" and type "NONE".
# 06. POST /v2/entities, to create Room2 with temperature and pressure.
# 07. POST /v2/subscriptions, to create subscription with covered=false and some attributes in attrs which is not present in entities.
# 08. GET /v2/subscriptions/subscription_id, to check the covered=false.
# 09. PATCH /v2/entities/Room2/attrs, to update the value of pressure attribute.
# 10. Dump the accumulator, see the no missing attribute in the notification added.
# 11. POST /v2/subscriptions, to create subscription with covered=foo and see error.
#


echo '01. POST /v2/entities, to create Room1 with temperature and pressure.'
echo '====================================================================='
payload='{
  "id": "Room1",
  "type": "Room",
  "temperature": {
    "value": 23,
    "type": "Float"
  },
  "pressure": {
    "value": 720,
    "type": "Integer"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo



echo '02. POST /v2/subscriptions, to create subscription with covered=true and some attributes in attrs which is not present in entities.'
echo '==================================================================================================================================='
payload='{
  "description": "A subscription to get info about Room1",
  "subject": {
    "entities": [
      {
        "id": "Room1",
        "type": "Room"
      }
    ],
    "condition": {
      "attrs": [
        "pressure"
      ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [
      "temperature",
      "humudity",
      "brightness"
    ],
    "covered": true
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo



echo '03. GET /v2/subscriptions/subscription_id, to check the covered=true.'
echo '====================================================================='
orionCurl --url /v2/subscriptions/${subId}
echo
echo



echo '04. PATCH /v2/entities/Room1/attrs, to update the value of pressure attribute.'
echo '=============================================================================='
payload='{
  "temperature": {
    "value": 24,
    "type": "Float"
  },
  "pressure": {
    "value": 730,
    "type": "Float"
  }
}'
orionCurl --url /v2/entities/Room1/attrs --payload "$payload" -X PATCH
echo
echo



echo "05. Dump the accumulator, see the missing attribute in the notification added with value null and type NONE."
echo "============================================================================================================"
accumulatorDump
accumulatorReset
echo
echo



echo '06. POST /v2/entities, to create Room2 with temperature and pressure.'
echo '====================================================================='
payload='{
  "id": "Room2",
  "type": "Room",
  "temperature": {
    "value": 23,
    "type": "Float"
  },
  "pressure": {
    "value": 720,
    "type": "Integer"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo



echo '07. POST /v2/subscriptions, to create subscription with covered=false and some attributes in attrs which is not present in entities.'
echo '===================================================================================================================================='
payload='{
  "description": "A subscription to get info about Room2",
  "subject": {
    "entities": [
      {
        "id": "Room2",
        "type": "Room"
      }
    ],
    "condition": {
      "attrs": [
        "pressure"
      ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [
      "temperature",
      "humudity",
      "brightness"
    ],
    "covered": false
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo



echo '08. GET /v2/subscriptions/subscription_id, to check the covered=false.'
echo '======================================================================'
orionCurl --url /v2/subscriptions/${subId}
echo
echo



echo '09. PATCH /v2/entities/Room2/attrs, to update the value of pressure attribute.'
echo '=============================================================================='
payload='{
  "temperature": {
    "value": 24,
    "type": "Float"
  },
  "pressure": {
    "value": 730,
    "type": "Float"
  }
}'
orionCurl --url /v2/entities/Room2/attrs --payload "$payload" -X PATCH
echo
echo



echo "10. Dump the accumulator, see the no missing attribute in the notification added."
echo "================================================================================="
accumulatorDump
accumulatorReset
echo
echo



echo '11. POST /v2/subscriptions, to create subscription with covered=foo and see error.'
echo '=================================================================================='
payload='{
  "description": "A subscription to get info about Room1",
  "subject": {
    "entities": [
      {
        "id": "Room1",
        "type": "Room"
      }
    ],
    "condition": {
      "attrs": [
        "pressure"
      ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [
      "temperature",
      "temp1",
      "temp2"
    ],
    "covered": "foo"
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo



--REGEXPECT--
01. POST /v2/entities, to create Room1 with temperature and pressure.
=====================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/Room1?type=Room
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. POST /v2/subscriptions, to create subscription with covered=true and some attributes in attrs which is not present in entities.
===================================================================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. GET /v2/subscriptions/subscription_id, to check the covered=true.
=====================================================================
HTTP/1.1 200 OK
Content-Length: 373
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "A subscription to get info about Room1",
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [
            "temperature",
            "humudity",
            "brightness"
        ],
        "attrsFormat": "normalized",
        "covered": true,
        "http": {
            "url": "http://localhost:9997/notify"
        },
        "onlyChangedAttrs": false
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": [
                "pressure"
            ]
        },
        "entities": [
            {
                "id": "Room1",
                "type": "Room"
            }
        ]
    }
}


04. PATCH /v2/entities/Room1/attrs, to update the value of pressure attribute.
==============================================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



05. Dump the accumulator, see the missing attribute in the notification added with value null and type NONE.
============================================================================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 253
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "brightness": {
                "metadata": {},
                "type": "NONE",
                "value": "null"
            },
            "humudity": {
                "metadata": {},
                "type": "NONE",
                "value": "null"
            },
            "id": "Room1",
            "temperature": {
                "metadata": {},
                "type": "Float",
                "value": 24
            },
            "type": "Room"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


06. POST /v2/entities, to create Room2 with temperature and pressure.
=====================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/Room2?type=Room
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



07. POST /v2/subscriptions, to create subscription with covered=false and some attributes in attrs which is not present in entities.
====================================================================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



08. GET /v2/subscriptions/subscription_id, to check the covered=false.
======================================================================
HTTP/1.1 200 OK
Content-Length: 358
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "A subscription to get info about Room2",
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [
            "temperature",
            "humudity",
            "brightness"
        ],
        "attrsFormat": "normalized",
        "http": {
            "url": "http://localhost:9997/notify"
        },
        "onlyChangedAttrs": false
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": [
                "pressure"
            ]
        },
        "entities": [
            {
                "id": "Room2",
                "type": "Room"
            }
        ]
    }
}


09. PATCH /v2/entities/Room2/attrs, to update the value of pressure attribute.
==============================================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



10. Dump the accumulator, see the no missing attribute in the notification added.
=================================================================================
POST http://localhost:9997/notify
Fiware-Servicepath: /
Content-Length: 139
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "id": "Room2",
            "temperature": {
                "metadata": {},
                "type": "Float",
                "value": 24
            },
            "type": "Room"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


11. POST /v2/subscriptions, to create subscription with covered=foo and see error.
==================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 60
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "covered is not a bool",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
