# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute update operator: set (as regular update)

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create entity E with A={X:1, Y:2}
# 02. Create sub for entity E
# 03. Update A with $set: "foo"
# 04. Get entity, see E-A="foo"
# 05. Update A with $set: 10
# 06. Get entity, see E-A=10
# 07. Update A with $set: true
# 08. Get entity, see E-A=true
# 09. Update A with $set: null
# 10. Get entity, see E-A=null
# 11. Update A with $set: <array>
# 12. Get entity, see E-A=<array>
# 13. Update A with $set: <object>
# 14. Get entity, see E-A=<object>
# 15. Dump accumulator, see 6 notifications E-A-X being a string, number, boolean, null, array and object
#


echo '01. Create entity E with A={X:1, Y:2}'
echo '====================================='
payload='{
  "id": "E",
  "type": "T",
  "A": {
    "value": {"X": 1, "Y": 2},
    "type": "Object"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '02. Create sub for entity E'
echo '==========================='
payload='{
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
   },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo '03. Update A with $set:"foo"'
echo '================================='
payload='{
  "A": {
    "value": { "$set": "foo" },
    "type": "Object"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '04. Get entity, see E-A="foo"'
echo '============================='
orionCurl --url /v2/entities/E
echo
echo


echo '05. Update A with $set: 10'
echo '=========================='
payload='{
  "A": {
    "value": { "$set": 10 },
    "type": "Object"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '06. Get entity, see E-A=10'
echo '=========================='
orionCurl --url /v2/entities/E
echo
echo


echo '07. Update A with $set: true'
echo '============================'
payload='{
  "A": {
    "value": { "$set": true },
    "type": "Object"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '08. Get entity, see E-A=true'
echo '============================'
orionCurl --url /v2/entities/E
echo
echo


echo '09. Update A with $set: null'
echo '============================'
payload='{
  "A": {
    "value": { "$set": null },
    "type": "Object"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '10. Get entity, see E-A=null'
echo '============================'
orionCurl --url /v2/entities/E
echo
echo


echo '11. Update A with $set: <array>}'
echo '================================'
payload='{
  "A": {
    "value": {
      "$set": [
        "22",
        {
          "x" : [ "x1", "x2" ],
          "y" : 3
        },
        [ "z1", "z2" ]
      ]
    },
    "type": "Object"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '12. Get entity, see E-A=<array>'
echo '==============================='
orionCurl --url /v2/entities/E
echo
echo


echo '13. Update A with $set: <object>'
echo '================================'
payload='{
  "A": {
    "value": {
      "$set": {
        "x": {
          "x1": "a",
          "x2": "b"
        },
        "y": [ "y1", "y2" ]
      }
    },
    "type": "Object"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '14. Get entity, see E-A=<object>'
echo '================================'
orionCurl --url /v2/entities/E
echo
echo


echo '15. Dump accumulator, see 6 notifications E-A-X being a string, number, boolean, null, array and object'
echo '======================================================================================================='
accumulatorDump
echo
echo


--REGEXPECT--

Location: /v2/subscriptions/REGEX([0-9a-f\-]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 174
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Object",
                "value": {
                    "X": {
                        "x": {
                            "x1": "a",
                            "x2": "b"
                        },
                        "y": [
                            "y1",
                            "y2"
                        ]
                    },
                    "Y": 2
                }
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop $LISTENER_PORT
dbDrop CB
